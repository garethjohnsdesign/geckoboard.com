---
title: 'Guest Blog: Display your NodeJS application''s metrics using Geckoboard with
  the new Geckoboard-push module'
date: 2012-06-11 15:22:00 Z
type: BlogPost
assets:
- path: "/uploads/hero2-22.jpg"
  type: BlogAsset
- path: "/uploads/1-example-site.png.scaled500-2.png"
  type: BlogAsset
- path: "/uploads/0-dashboard.png.scaled500-2.png"
  type: BlogAsset
---

<p></p><p><em>This is a guest blog post by Dan Jenkins, a Senior Web Developer at <a href="http://www.holidayextras.co.uk" target="_blank">Holiday Extras</a>, who sell Airport Parking, Hotels, Lounges and other extras for holidays. Dan is currently in the middle of implementing Geckoboard within a few of their internal services to display metrics on call volumes, send rates and page hits to name a few.</em></p><br><p> </p><br><p><strong>Why did I start looking at Geckoboard?</strong></p><br><p>A few weeks ago I started looking at <a href="https://www.geckoboard.com">wallboard</a> type services out on the world wide web; and I came across Geckoboard. We've been working on our new VoIP platform for a while now and I've been keen to look at how we can create some wallboards for our Contact Centre; to show how many calls  have been answered, how many are currently waiting, how many of our Agents are currently taking calls and a few other things too.</p><br><p>Part of this VoIP platform has been written in NodeJS, a new technology which is around 2 years old right now. "Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices", this comes direct from the <a href="http://nodejs.org" target="_blank">NodeJS</a> website and explains perfectly why it's becoming so popular right now; but more importantly why we chose it to be part of our VoIP platform. When it comes to Voice over IP, if you haven't got real-time data, then there's no point having it.</p><br><p>So what better than Geckoboard's new Push API to go along with this real-time data? However, I hit a snag with the Push API and NodeJS being so new, there was no quick answer to trying the service out. There were no modules available on <a href="http://npmjs.org" target="_blank">NPM</a> for the Push API, so I made one; if you've already got NodeJs installed, you can just install the module by running the following command from within your NodeJS project:</p><br><p><em>npm install geckoboard-push</em></p><br><p> </p><br><p><strong>Let's talk about the geckoboard-push module</strong></p><br><p>The module is completely open source and released under the MIT license; use it to your heart's content and if you'd like to contribute then submit a <a href="https://github.com/danjenkins/node-geckoboard-push" target="_blank">pull request via github</a>.</p><br><p>All the docs are on github, <del>and there's now an example site at <a href="http://geckoboard-danjenkins.dotcloud.com" target="_blank">geckoboard-danjenkins.dotcloud.com</a></del>(it's a sandbox dotcloud account so no guarantees about uptime!). On this example site you can change the values and send them to my test geckoboard wallboard.</p><br><p></p><div class="p_embed p_image_embed">
<br><img alt="Dashboard" height="162" src="/uploads/0-dashboard.png.scaled500-2.png" width="181"><br>
</div><br><br><p> </p><br><p><strong>How do I go about using </strong><strong>the geckoboard-push module</strong><strong>?</strong></p><br><p>Within your application, you can include your installed module and initialise it with your API key, which you can find within your settings in geckoboard.</p><br><p><em>var Geckoboard = require('geckoboard-push');</em></p><br><p><em>var gecko = new Geckoboard({api_key: 'api-key'});</em></p><br><p>Then you can instantiate an object for the specific type of communication with geckoboard; your widget key is specific to a particular widget and widget type, so below you can see a variable funnel being constructed by the funnel command with the corresponding widget key. This means if you've got two funnel widgets, you could instantiate two different variables by using two different widget keys and use each variable throughout your codebase for each widget.</p><br><p><em>var funnel = gecko.funnel('widget-key');</em></p><br><p>Once you've instantiated the variable for your widget type, you can then send geckoboard some data. The data you send to geckoboard depends on each widget; you do need to check the docs for this part. For the funnel widget, you HAVE to send 3 parameters; an Array of Objects, the type and whether to show percentages; the fourth (optional) parameter is the callback.</p><br><p><em>funnel.send([{},{},{}], 'standard','show', function(response){</em></p><br><p><em>console.log('Funnel response from geckoboard', response);</em></p><br><p><em>})</em></p><br><p>The Array of Objects would look something like the example below, each object having a value and a label.</p><br><p><em>[{</em></p><br><p><em>value: "87809",</em></p><br><p><em>label: "Step1"</em></p><br><p><em>},</em></p><br><p><em>{</em></p><br><p><em>value: "70022",</em></p><br><p><em>label: "Step2"</em></p><br><p><em>}]</em></p><br><p> </p><br><p></p><div class="p_embed p_image_embed">
<br><img alt="Example-site" height="101" src="/uploads/1-example-site.png.scaled500-2.png" width="214"><br>
</div><br><br><p>Either take a look at the module's <a href="https://github.com/danjenkins/node-geckoboard-push" target="_blank">documentation</a> or the <del><a href="http://geckoboard-danjenkins.dotcloud.com" target="_blank">example site</a></del> for the module, both will tell you what parameters you need to pass into each call to geckoboard. Your other option is to take a look at <a href="https://developer.geckoboard.com/" target="_blank">Geckoboard's documentation</a> for each different widget type.</p><br><p> </p><br><p><strong>What does the module support?</strong></p><br><p>The module supports each widget that's currently supported by Geckoboard's Push API:</p><br><ul>
<br><li>Number &amp; Secondary Stat</li>
<br><li>RAG Column and Numbers</li>
<br><li>RAG Numbers</li>
<br><li>Text</li>
<br><li>Funnel Chart</li>
<br><li>Bullet Graph</li>
<br><li>Geck-O-Meter</li>
<br><li>Line Chart</li>
<br><li>Pie Chart</li>
<br><li>Mapping</li>
<br>
</ul><br><p>As soon as a new widget is supported by the Push API, it'll get added to the module; of course if something isn't supported then feel free to fork the project and submit a pull request via github. Let me know if you've used, or are thinking of using the module, if there's something missing from the module or any general comments about the module itself.</p><br><p> </p>
